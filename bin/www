#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('chat:server');
var http = require('http');

if (process.argv[2] === 'wat') {
  var webpack = require('webpack');
  var webpackConfig = require('../webpack.config');
  var compiler = webpack(webpackConfig);

  // 在这里实现自动化打包观察
  const watching = compiler.watch({
    aggregateTimeout: 300,
    poll: undefined
  }, (err, stats) => {
    //console.log(stats)
  })
}


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);



/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

//  // socket.io 相关配置
// var io = require('socket.io')(server);
// let userMap = {};

// io.on('connection', function(socket){
//   console.log('a user connected');
//   //监听客户端的消息

//   socket.on('chat message', function(toUser, owner, msg){
//   	//用于将消息发送给每个人，包括发送者
//     //io.emit('chat message', msg);

//     //  一对一传输
//     let targetId = userMap[toUser];
//     io.to(`${targetId}`).emit('chat message', {owner: owner, message: msg});
//   });

//   socket.on('register', function(userID) {
//     userMap[userID] = socket.id;
//     console.log(userMap, 'register success!');
//   })
//   socket.on('disconnect', function(){
//     console.log('user disconnected');
//   });
// });

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
